import { mergeProps, useSSRContext } from "vue";
import { ssrRenderAttrs } from "@vue/server-renderer";
import { useHead } from "@vueuse/head";
const _sfc_main = {
  expose: [],
  __ssrInlineRender: true,
  setup(__props) {
    const head = { "title": "Python", "meta": [{ "property": "og:title", "content": "Python" }, { "property": "og:description", "content": "General-purpose, high-level programming language supporting multiple programming paradigms." }, { "name": "description", "content": "General-purpose, high-level programming language supporting multiple programming paradigms." }] };
    useHead(head);
    return (_ctx, _push, _parent, _attrs) => {
      _push(`<div${ssrRenderAttrs(mergeProps({ class: "flex flex-col" }, _attrs))}><h1>Python in Fedora</h1><p><a href="https://www.python.org/">Python</a> is a widely used, interpreted, object-oriented, high-level programming language with dynamic semantics. It is simple and easy to learn. Python 3 is already pre-installed on Fedora. Let\u2019s use it!</p><h2>Running Python</h2><ol><li>Open your <em>terminal</em>. (In GNOME, press <code>Alt</code> + <code>F1</code>, type <em>Terminal</em> and press <kbd>Enter</kbd>.)</li><li>To run Python, type <code>python</code> <kbd>Enter</kbd>. You should see something like this:</li></ol><pre class="language-python"><code class="language-python">Python <span class="token number">3.9</span><span class="token number">.0</span> <span class="token punctuation">(</span>default<span class="token punctuation">,</span> Oct  <span class="token number">6</span> <span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">)</span> 
<span class="token punctuation">[</span>GCC <span class="token number">10.2</span><span class="token number">.1</span> <span class="token number">20201005</span> <span class="token punctuation">(</span>Red Hat <span class="token number">10.2</span><span class="token number">.1</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span> on linux
Type <span class="token string">&quot;help&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;copyright&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;credits&quot;</span> <span class="token keyword">or</span> <span class="token string">&quot;license&quot;</span> <span class="token keyword">for</span> more information<span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> 
</code></pre><p>Now you can start to write in Python! Let\u2019s print <em>Hello World</em>!</p><pre class="language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">)</span>
</code></pre><p>If you want to <strong>exit</strong> Python, press <code>Ctrl</code> + <code>D</code>.</p><p>To run a program written in Python, type <code>python</code> followed by the file name of the program. Like this:</p><pre class="language-bash"><code class="language-bash">$ python example.py
</code></pre><p>In some guides, you will see <code>python3</code> used instead of <code>python</code>. These commands are equivalent. You can also run a more specific version of Python, like <code>python3.9</code>, if you have that interpreter installed. See the <a href="https://developer.fedoraproject.org/tech/languages/python/multiple-pythons.html">Multiple Interpreters section</a> for details.</p><h2>Python packages</h2><p>Fedora contains many popular packages for Python. Usually, they are named with a <code>python3-</code> prefix, such as <code>python3-requests</code>.</p><p>These are useful for scripting and exploring Python and for Fedora-specific applications. For software development or reproducible data analysis, it is better to use virtual environments.</p><h2>Using virtual environments</h2><p>When you work on a project, it is good to keep it inside a virtual environment. It will keep the dependencies you need in one place and you do not have to worry about different projects which need different versions of the same module. It also makes it easy to collaborate with people who don\u2019t use Fedora yet.</p><p>Let\u2019s create a virtual environment called <code>project_venv</code> which will contain Python and pip. You can use pip to install a project\u2019s dependencies.</p><pre class="language-bash"><code class="language-bash">$ python -m venv project_venv
</code></pre><p>If you want to work in the virtual environment, you have to activate it.</p><pre class="language-bash"><code class="language-bash">$ <span class="token builtin class-name">source</span> project_venv/bin/activate
</code></pre><p>When the virtual environment is activated (you can see its name in brackets at the beginning of your prompt), you can install modules via <code>pip install</code>.</p><pre class="language-bash"><code class="language-bash"><span class="token punctuation">(</span>project_venv<span class="token punctuation">)</span> $ python -m pip <span class="token function">install</span> requests
</code></pre><p>That is all, you have successfully created your own virtual environment. Now you can run Python (see above) and start working on your project.</p><p>When you finish your work, you can deactivate the virtual environment.</p><pre class="language-bash"><code class="language-bash"><span class="token punctuation">(</span>project_venv<span class="token punctuation">)</span> $ deactivate
</code></pre><p>Note that packages installed system-wide are not available in the virtual environments: by default, virtual environments are isolated from the system. As an alternative, you can create the environment with <code>--system-site-packages</code> \u2013 but note that when you update your Fedora packages, they may get out of sync with modules installed inside the environment.</p><h3>What next?</h3><ul><li><a href="https://www.python.org/">Python homepage</a></li><li><a href="https://docs.python.org/">Python Documentation</a></li><li><a href="https://docs.python.org/3/library/venv.html#module-venv">Python Documentation: venv</a></li></ul></div>`);
    };
  }
};
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("G:/Users/farhan/Documents/GitHub/portfolio/src/pages/blog/languages/python/python-installation.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
export {
  _sfc_main as default
};
